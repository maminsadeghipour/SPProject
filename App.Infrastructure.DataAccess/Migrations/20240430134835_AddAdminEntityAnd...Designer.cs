// <auto-generated />
using System;
using App.Infrastructure.DataAccess.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240430134835_AddAdminEntityAnd..")]
    partial class AddAdminEntityAnd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core.AddressAgg.Entity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.AddressAgg.Entity.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.AdminAgg.Entity.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(9940),
                            IsDeleted = false,
                            Password = "admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.CustomerAgg.Entity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 392, DateTimeKind.Local).AddTicks(3770),
                            FirstName = "Ali",
                            IsDeleted = false,
                            LastName = "Alizadeh",
                            Password = "1234",
                            PhoneNumber = "09121234567",
                            RegisteredAt = new DateTime(2024, 4, 30, 17, 18, 34, 392, DateTimeKind.Local).AddTicks(3720),
                            Username = "Ali.Alizadeh"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.ExpertAgg.Entity.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Experts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BankAccount = "6362141111223344",
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 392, DateTimeKind.Local).AddTicks(8980),
                            FirstName = "Mohmad",
                            IsDeleted = false,
                            LastName = "Sadeghi",
                            Password = "1234",
                            PhoneNumber = "09123215476",
                            RegisteredAt = new DateTime(2024, 4, 30, 17, 18, 34, 392, DateTimeKind.Local).AddTicks(8960),
                            Username = "m.sadeghi"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.FeedBackAgg.Entity.CostumerFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Rate")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("RequestId");

                    b.ToTable("CustomerFeedbacks", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.RequestAgg.Entity.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("FulfillmentDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("RequestId");

                    b.ToTable("Bids", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.RequestAgg.Entity.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcceptedBidId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestState")
                        .HasColumnType("int");

                    b.Property<int>("SkillServeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SkillServeId");

                    b.ToTable("Requests", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.RequestAgg.Entity.RequestPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestPictures", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.SkillServeAgg.Entity.SkillServe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MinWage")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SkillServes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(6710),
                            Description = "نظافت منزل با بهترین امکانات",
                            IsDeleted = false,
                            MinWage = 400000,
                            Title = "نظافت منزل"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(6740),
                            Description = "قالی های خود را به ما بسپارید",
                            IsDeleted = false,
                            MinWage = 300000,
                            Title = "قالی شویی"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(6740),
                            Description = "سردته؟ با یه درخواست سیستم گرمایشتو درست کن",
                            IsDeleted = false,
                            MinWage = 500000,
                            Title = "سرمایش و گرمایش"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(6740),
                            Description = "خسته شدی از اینکه ساختمانت درست نیست راه حلش پیش ماست",
                            IsDeleted = false,
                            MinWage = 300000,
                            Title = "تعمیرات ساختمان"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(6750),
                            Description = "دیگه نگران خراب شدن یخچالت نباش",
                            IsDeleted = false,
                            MinWage = 400000,
                            Title = "تعمیرات یخچال"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(6750),
                            Description = "ماشین لباسشوییت لباساتو خوب تمیز نمیکنه ؟ درخواست بده",
                            IsDeleted = false,
                            MinWage = 300000,
                            Title = "تعمیرات ماشین لباس شویی"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(6750),
                            Description = "تعمیر کارا ماشینتو جواب کردن ؟ اینجا درستش کن ",
                            IsDeleted = false,
                            MinWage = 600000,
                            Title = "تعمیرات خودرو"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(6750),
                            Description = "با همسرت سره کثیفی ماشین دعواتون شده ؟ اشکال نداره ما براتون مشکلتونو حل میکنیم",
                            IsDeleted = false,
                            MinWage = 150000,
                            Title = "کارواش"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(6760),
                            Description = "دیگه اگه موبایلت درست کار نکنه چه جوری می خوای زندگی کنی",
                            IsDeleted = false,
                            MinWage = 600000,
                            Title = "تعمیرات موبایل"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(6760),
                            Description = "حوصله نداری تا مغازه بری ما میاییم پیشت",
                            IsDeleted = false,
                            MinWage = 500000,
                            Title = "تعیرات لپ تاپ"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(6760),
                            Description = "می خوای نقل مکان کنی ؟ ما برات  بسته  بندی  و انجام میدیم",
                            IsDeleted = false,
                            MinWage = 200000,
                            Title = "سرویس بسته بندی"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(6760),
                            Description = "می خوای نقل مکان کنی ؟ ما برات انجام میدیم",
                            IsDeleted = false,
                            MinWage = 700000,
                            Title = "اسباب کشی"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.SkillServeAgg.Entity.SkillServeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SkillServeCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(8680),
                            Description = "ارئه خدمات مربوط به نظافت منزل و ...",
                            IsDeleted = false,
                            Title = "نظافت"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(8690),
                            Description = "خدمات مربوط به ساختمان و..",
                            IsDeleted = false,
                            Title = "ساختمان"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(8690),
                            Description = "تعمیرات یخچال و ...",
                            IsDeleted = false,
                            Title = "تعمیرات اشیا"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(8690),
                            Description = "خدمات مربوط به خودرو تعمیرات و ...",
                            IsDeleted = false,
                            Title = "خودرو"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(8700),
                            Description = "تعمیرات موبایل و تجهیزات الکترونیک",
                            IsDeleted = false,
                            Title = "الکترونیک"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 4, 30, 17, 18, 34, 395, DateTimeKind.Local).AddTicks(8700),
                            Description = "خدمات مربوط به اسباب کشی ",
                            IsDeleted = false,
                            Title = "حمل و نقل"
                        });
                });

            modelBuilder.Entity("ExpertSkillServe", b =>
                {
                    b.Property<int>("ExpertsId")
                        .HasColumnType("int");

                    b.Property<int>("SkillServesId")
                        .HasColumnType("int");

                    b.HasKey("ExpertsId", "SkillServesId");

                    b.HasIndex("SkillServesId");

                    b.ToTable("ExpertSkillServe");
                });

            modelBuilder.Entity("App.Domain.Core.AddressAgg.Entity.Address", b =>
                {
                    b.HasOne("App.Domain.Core.AddressAgg.Entity.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.CustomerAgg.Entity.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("App.Domain.Core.FeedBackAgg.Entity.CostumerFeedback", b =>
                {
                    b.HasOne("App.Domain.Core.CustomerAgg.Entity.Customer", "Customer")
                        .WithMany("CostumerFeedbacks")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.ExpertAgg.Entity.Expert", "Expert")
                        .WithMany("CostumerFeedbacks")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.RequestAgg.Entity.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("App.Domain.Core.RequestAgg.Entity.Bid", b =>
                {
                    b.HasOne("App.Domain.Core.ExpertAgg.Entity.Expert", "Expert")
                        .WithMany("Bids")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.RequestAgg.Entity.Request", "Request")
                        .WithMany("Bids")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("App.Domain.Core.RequestAgg.Entity.Request", b =>
                {
                    b.HasOne("App.Domain.Core.CustomerAgg.Entity.Customer", "Customer")
                        .WithMany("Requests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.SkillServeAgg.Entity.SkillServe", "SkillServe")
                        .WithMany("Requests")
                        .HasForeignKey("SkillServeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SkillServe");
                });

            modelBuilder.Entity("App.Domain.Core.RequestAgg.Entity.RequestPicture", b =>
                {
                    b.HasOne("App.Domain.Core.RequestAgg.Entity.Request", "Request")
                        .WithMany("Pictures")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("App.Domain.Core.SkillServeAgg.Entity.SkillServe", b =>
                {
                    b.HasOne("App.Domain.Core.SkillServeAgg.Entity.SkillServeCategory", "Category")
                        .WithMany("SkillServes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ExpertSkillServe", b =>
                {
                    b.HasOne("App.Domain.Core.ExpertAgg.Entity.Expert", null)
                        .WithMany()
                        .HasForeignKey("ExpertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.SkillServeAgg.Entity.SkillServe", null)
                        .WithMany()
                        .HasForeignKey("SkillServesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.AddressAgg.Entity.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("App.Domain.Core.CustomerAgg.Entity.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CostumerFeedbacks");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("App.Domain.Core.ExpertAgg.Entity.Expert", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("CostumerFeedbacks");
                });

            modelBuilder.Entity("App.Domain.Core.RequestAgg.Entity.Request", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("App.Domain.Core.SkillServeAgg.Entity.SkillServe", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("App.Domain.Core.SkillServeAgg.Entity.SkillServeCategory", b =>
                {
                    b.Navigation("SkillServes");
                });
#pragma warning restore 612, 618
        }
    }
}
